from _typeshed import Incomplete
from dataclasses import dataclass
from graphviz import Digraph            # type: ignore
from typing import Any, Iterator

__all__ = ['Node', 'tree', 'bst', 'heap', 'build', 'build2', 'get_index', 'get_parent', 'number_to_letters', '__version__', 'NodeValue', 'NodeValueList']

__version__: Incomplete
NodeValue = Any
NodeValueList = list[float | None] | list[int | None] | list[str | None] | list[float] | list[int] | list[str]

@dataclass
class NodeProperties:
    height: int
    size: int
    is_max_heap: bool
    is_min_heap: bool
    is_perfect: bool
    is_strict: bool
    is_complete: bool
    leaf_count: int
    min_node_value: NodeValue
    max_node_value: NodeValue
    min_leaf_depth: int
    max_leaf_depth: int
    def __init__(self, height, size, is_max_heap, is_min_heap, is_perfect, is_strict, is_complete, leaf_count, min_node_value, max_node_value, min_leaf_depth, max_leaf_depth) -> None: ...

class Node:
    value: Incomplete
    left: Incomplete
    right: Incomplete
    def __init__(self, value: NodeValue, left: Node | None = None, right: Node | None = None) -> None: ...
    def __setattr__(self, attr: str, obj: Any) -> None: ...
    def __iter__(self) -> Iterator['Node']: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> Node: ...
    def __setitem__(self, index: int, node: Node) -> None: ...
    def __delitem__(self, index: int) -> None: ...
    def svg(self, node_radius: int = 16) -> str: ...
    def graphviz(self, *args: Any, **kwargs: Any) -> Digraph: ...
    def pprint(self, index: bool = False, delimiter: str = '-') -> None: ...
    def validate(self) -> None: ...
    def equals(self, other: Node) -> bool: ...
    def clone(self) -> Node: ...
    @property
    def values(self) -> list[NodeValue | None]: ...
    @property
    def values2(self) -> list[NodeValue | None]: ...
    @property
    def leaves(self) -> list['Node']: ...
    @property
    def levels(self) -> list[list['Node']]: ...
    @property
    def height(self) -> int: ...
    @property
    def size(self) -> int: ...
    @property
    def leaf_count(self) -> int: ...
    @property
    def is_balanced(self) -> bool: ...
    @property
    def is_bst(self) -> bool: ...
    @property
    def is_symmetric(self) -> bool: ...
    @property
    def is_max_heap(self) -> bool: ...
    @property
    def is_min_heap(self) -> bool: ...
    @property
    def is_perfect(self) -> bool: ...
    @property
    def is_strict(self) -> bool: ...
    @property
    def is_complete(self) -> bool: ...
    @property
    def min_node_value(self) -> NodeValue: ...
    @property
    def max_node_value(self) -> NodeValue: ...
    @property
    def max_leaf_depth(self) -> int: ...
    @property
    def min_leaf_depth(self) -> int: ...
    @property
    def properties(self) -> dict[str, Any]: ...
    @property
    def inorder(self) -> list['Node']: ...
    @property
    def preorder(self) -> list['Node']: ...
    @property
    def postorder(self) -> list['Node']: ...
    @property
    def levelorder(self) -> list['Node']: ...

def number_to_letters(number: int) -> str: ...
def get_index(root: Node, descendent: Node) -> int: ...
def get_parent(root: Node | None, child: Node | None) -> Node | None: ...
def build(values: NodeValueList) -> Node | None: ...
def build2(values: list[NodeValue]) -> Node | None: ...
def tree(height: int = 3, is_perfect: bool = False, letters: bool = False) -> Node | None: ...
def bst(height: int = 3, is_perfect: bool = False, letters: bool = False) -> Node | None: ...
def heap(height: int = 3, is_max: bool = True, is_perfect: bool = False, letters: bool = False) -> Node | None: ...
